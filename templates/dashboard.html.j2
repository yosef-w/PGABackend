<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>PGA Parking Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    .percent-high { color: green; font-weight: bold; }
    .percent-mid { color: orange; font-weight: bold; }
    .percent-low { color: red; font-weight: bold; }
  </style>
</head>
<body class="bg-light">
  <div class="container mt-5">
    <h1 class="mb-4">PGA Parking Dashboard</h1>
    <button class="btn btn-primary mb-3" onclick="location.reload()">Refresh</button>

    {% for garage in data %}
      <div class="card mb-4 shadow">
        <div class="card-header bg-primary text-white">
          <h2 class="h5">{{ garage.garage_name }}</h2>
          <p class="mb-0">
            <strong>Summary:</strong>
            Total Bays: {{ garage.total_bays }} |
            Available Bays: {{ garage.available_bays }} |
            Available: 
            <span class="{% if garage.percent_available >= 75 %}percent-high{% elif garage.percent_available >= 40 %}percent-mid{% else %}percent-low{% endif %}">
              {{ garage.percent_available | round(1) }}%
            </span>
          </p>
        </div>
        <div class="card-body">
          <canvas id="garage-chart-{{ garage.garage_name | replace(' ', '-') }}"></canvas>
          
          <div class="row mt-3">
            {% for level in garage.levels %}
              <div class="col-md-6">
                <div class="border p-2 rounded bg-white">
                  <h5 class="h6">{{ level.level_name }}</h5>
                  <p>
                    Total Bays: {{ level.total_bays }} |
                    Available Bays: {{ level.available_bays }} |
                    <span class="{% if level.percent_available >= 75 %}percent-high{% elif level.percent_available >= 40 %}percent-mid{% else %}percent-low{% endif %}">
                      {{ level.percent_available | round(1) }}%
                    </span>
                  </p>
                  <canvas id="level-chart-{{ garage.garage_name | replace(' ', '-') }}-{{ level.level_name | replace(' ', '-') }}"></canvas>
                </div>
              </div>
            {% endfor %}
          </div>
        </div>
      </div>
    {% endfor %}
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const data = {{ data | tojson }};
      
      data.forEach(garage => {
        const gId = `garage-chart-${garage.garage_name.replace(/ /g, '-')}`;
        const gCtx = document.getElementById(gId).getContext('2d');
        const gLabels = garage.levels.map(l => l.level_name);
        const gAvailable = garage.levels.map(l => l.available_bays);
        const gOccupied = garage.levels.map(l => l.total_bays - l.available_bays);

        new Chart(gCtx, {
          type: 'bar',
          data: {
            labels: gLabels,
            datasets: [
              {
                label: 'Available Bays',
                data: gAvailable,
                backgroundColor: 'rgba(75, 192, 192, 0.7)'
              },
              {
                label: 'Occupied Bays',
                data: gOccupied,
                backgroundColor: 'rgba(255, 99, 132, 0.7)'
              }
            ]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
                precision: 0
              }
            }
          }
        });

        garage.levels.forEach(level => {
          const lId = `level-chart-${garage.garage_name.replace(/ /g, '-')}-${level.level_name.replace(/ /g, '-')}`;
          const lCtx = document.getElementById(lId).getContext('2d');
          const lLabels = level.zones.map(z => z.zone_name);
          const lAvailable = level.zones.map(z => z.available_bays);
          const lOccupied = level.zones.map(z => z.total_bays - z.available_bays);

          new Chart(lCtx, {
            type: 'pie',
            data: {
              labels: lLabels,
              datasets: [{
                data: lLabels.map((_, i) => lAvailable[i] + lOccupied[i]),
                backgroundColor: lLabels.map((_, i) => i % 2 === 0 ? 'rgba(54, 162, 235, 0.6)' : 'rgba(255, 205, 86, 0.6)')
              }]
            },
            options: {
              plugins: {
                tooltip: {
                  callbacks: {
                    label: function (context) {
                      const idx = context.dataIndex;
                      return `${lLabels[idx]}: ${lAvailable[idx]} available / ${lOccupied[idx]} occupied`;
                    }
                  }
                }
              }
            }
          });
        });
      });
    });
  </script>
</body>
</html>
